name: .NET Test Automation

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
  workflow_dispatch:  # Allows manual triggering

jobs:
  test:
    runs-on: self-hosted  # Uses your local self-hosted runner
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Install NuGet
      run: |
        $nugetPath = "C:\nuget\nuget.exe"
        if (-not (Test-Path $nugetPath)) {
          New-Item -ItemType Directory -Path "C:\nuget" -Force
          Invoke-WebRequest -Uri "https://dist.nuget.org/win-x86-commandline/latest/nuget.exe" -OutFile $nugetPath
        }
        # Add to PATH for current session
        $env:PATH = "C:\nuget;" + $env:PATH
        # Verify NuGet works
        & $nugetPath
      shell: powershell
      
    - name: Restore NuGet packages
      run: |
        $nugetPath = "C:\nuget\nuget.exe"
        # First try with solution file
        if (Test-Path "*.sln") {
          $solutionFile = Get-ChildItem -Path "*.sln" | Select-Object -First 1
          & $nugetPath restore $solutionFile
        } else {
          # If no solution file, use project file
          & $nugetPath restore YourProjectName\YourProjectName.csproj
        }
      shell: powershell
      
    - name: Build solution
      run: |
        # Check if MSBuild is in path
        $msbuildPath = $null
        if (Get-Command "msbuild" -ErrorAction SilentlyContinue) {
          $msbuildPath = "msbuild"
        } elseif (Test-Path "C:\Program Files (x86)\Microsoft Visual Studio\2019\*\MSBuild\Current\Bin\MSBuild.exe") {
          $msbuildPath = Get-ChildItem -Path "C:\Program Files (x86)\Microsoft Visual Studio\2019\*\MSBuild\Current\Bin\MSBuild.exe" -Recurse | Select-Object -First 1 -ExpandProperty FullName
        } elseif (Test-Path "C:\Program Files\Microsoft Visual Studio\2022\*\MSBuild\Current\Bin\MSBuild.exe") {
          $msbuildPath = Get-ChildItem -Path "C:\Program Files\Microsoft Visual Studio\2022\*\MSBuild\Current\Bin\MSBuild.exe" -Recurse | Select-Object -First 1 -ExpandProperty FullName
        } else {
          Write-Error "MSBuild not found"
          exit 1
        }
        
        if (Test-Path "*.sln") {
          $solutionFile = Get-ChildItem -Path "*.sln" | Select-Object -First 1
          Write-Host "Building solution: $solutionFile"
          & $msbuildPath $solutionFile /p:Configuration=Release
        } else {
          # If no solution file, use project file
          Write-Host "Building project: Commons_Automation\Commons_Automation.csproj"
          & $msbuildPath Commons_Automation\Commons_Automation.csproj /p:Configuration=Release
        }
      shell: powershell
      
    - name: Run tests
      run: |
        # Try to find VSTest
        $vstestPath = $null
        if (Test-Path "C:\Program Files (x86)\Microsoft Visual Studio\2019\*\Common7\IDE\CommonExtensions\Microsoft\TestWindow\vstest.console.exe") {
          $vstestPath = Get-ChildItem -Path "C:\Program Files (x86)\Microsoft Visual Studio\2019\*\Common7\IDE\CommonExtensions\Microsoft\TestWindow\vstest.console.exe" -Recurse | Select-Object -First 1 -ExpandProperty FullName
        } elseif (Test-Path "C:\Program Files\Microsoft Visual Studio\2022\*\Common7\IDE\CommonExtensions\Microsoft\TestWindow\vstest.console.exe") {
          $vstestPath = Get-ChildItem -Path "C:\Program Files\Microsoft Visual Studio\2022\*\Common7\IDE\CommonExtensions\Microsoft\TestWindow\vstest.console.exe" -Recurse | Select-Object -First 1 -ExpandProperty FullName
        }
        
        # Try to find the test DLL
        $testDllPath = $null
        if (Test-Path "Commons_Automation\bin\Release\Commons_Automation.dll") {
          $testDllPath = "Commons_Automation\bin\Release\Commons_Automation.dll"
        } else {
          $testDllPath = Get-ChildItem -Path ".\YourProjectName\bin\Release\*.dll" -Recurse | Where-Object { $_.Name -match "Test" } | Select-Object -First 1 -ExpandProperty FullName
        }
        
        if ($vstestPath -and $testDllPath) {
          Write-Host "Running tests with VSTest: $testDllPath"
          & $vstestPath $testDllPath
        } elseif (Get-Command "dotnet" -ErrorAction SilentlyContinue) {
          Write-Host "Running tests with dotnet test"
          dotnet test --no-build --configuration Release
        } else {
          Write-Error "No test runner found"
          exit 1
        }
      shell: powershell
